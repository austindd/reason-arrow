// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");

function arrow(f) {
  return {
          TAG: /* Func */1,
          _0: f
        };
}

var identity = {
  TAG: /* Func */1,
  _0: (function (prim) {
      return prim;
    })
};

function runF(__arrow, __arg) {
  var _a = __arg;
  var _arrowAb = __arrow;
  var _b_c = identity;
  var _arrowCd = identity;
  while(true) {
    var arrowCd = _arrowCd;
    var b_c = _b_c;
    var arrowAb = _arrowAb;
    var a = _a;
    switch (arrowAb.TAG | 0) {
      case /* Value */0 :
          throw {
                RE_EXN_ID: "Match_failure",
                _1: [
                  "Arrow3.re",
                  121,
                  38
                ],
                Error: new Error()
              };
      case /* Func */1 :
          var b = Curry._1(arrowAb._0, a);
          switch (b_c.TAG | 0) {
            case /* Value */0 :
                _arrowCd = identity;
                _b_c = identity;
                _arrowAb = arrowCd;
                _a = b_c._0;
                continue ;
            case /* Func */1 :
                _arrowCd = identity;
                _b_c = identity;
                _arrowAb = arrowCd;
                _a = Curry._1(b_c._0, b);
                continue ;
            case /* Pipe */2 :
                _b_c = b_c._1;
                _arrowAb = b_c._0;
                _a = b;
                continue ;
            case /* Zip2 */3 :
                var arrowUnitB1 = {
                  TAG: /* Value */0,
                  _0: b[0]
                };
                var arrowUnitB2 = {
                  TAG: /* Value */0,
                  _0: b[1]
                };
                var arrowUnitC1_1 = b_c._0;
                var arrowUnitC1 = {
                  TAG: /* Pipe */2,
                  _0: arrowUnitB1,
                  _1: arrowUnitC1_1
                };
                var arrowUnitC2_1 = b_c._1;
                var arrowUnitC2 = {
                  TAG: /* Pipe */2,
                  _0: arrowUnitB2,
                  _1: arrowUnitC2_1
                };
                _b_c = {
                  TAG: /* Zip2 */3,
                  _0: arrowUnitC1,
                  _1: arrowUnitC2
                };
                _arrowAb = identity;
                _a = [
                  undefined,
                  undefined
                ];
                continue ;
            
          }
      case /* Pipe */2 :
          var arrowXd_0 = {
            TAG: /* Pipe */2,
            _0: arrowAb._1,
            _1: b_c
          };
          var arrowXd = {
            TAG: /* Pipe */2,
            _0: arrowXd_0,
            _1: arrowCd
          };
          _arrowCd = arrowXd;
          _b_c = identity;
          _arrowAb = arrowAb._0;
          continue ;
      case /* Zip2 */3 :
          var arrowUnitA1 = {
            TAG: /* Value */0,
            _0: a[0]
          };
          var arrowUnitA2 = {
            TAG: /* Value */0,
            _0: a[1]
          };
          var arrowUnitB1_1 = arrowAb._0;
          var arrowUnitB1$1 = {
            TAG: /* Pipe */2,
            _0: arrowUnitA1,
            _1: arrowUnitB1_1
          };
          var arrowUnitB2_1 = arrowAb._1;
          var arrowUnitB2$1 = {
            TAG: /* Pipe */2,
            _0: arrowUnitA2,
            _1: arrowUnitB2_1
          };
          var arrowUnitB = {
            TAG: /* Zip2 */3,
            _0: arrowUnitB1$1,
            _1: arrowUnitB2$1
          };
          _arrowAb = arrowUnitB;
          _a = [
            undefined,
            undefined
          ];
          continue ;
      
    }
  };
}

function pipeR(arrowAb, bc) {
  return {
          TAG: /* Pipe */2,
          _0: arrowAb,
          _1: {
            TAG: /* Func */1,
            _0: bc
          }
        };
}

function pipeL(ab, arrowBc) {
  return {
          TAG: /* Pipe */2,
          _0: {
            TAG: /* Func */1,
            _0: ab
          },
          _1: arrowBc
        };
}

function composeR(arrowBc, ab) {
  return {
          TAG: /* Pipe */2,
          _0: {
            TAG: /* Func */1,
            _0: ab
          },
          _1: arrowBc
        };
}

function composeL(bc, arrowAb) {
  return {
          TAG: /* Pipe */2,
          _0: arrowAb,
          _1: {
            TAG: /* Func */1,
            _0: bc
          }
        };
}

function pipe(arrowAb, arrowBc) {
  return {
          TAG: /* Pipe */2,
          _0: arrowAb,
          _1: arrowBc
        };
}

function compose(arrowBc, arrowAb) {
  return {
          TAG: /* Pipe */2,
          _0: arrowAb,
          _1: arrowBc
        };
}

var split = {
  TAG: /* Func */1,
  _0: (function (a) {
      return [
              a,
              a
            ];
    })
};

function unsplit(ab_c) {
  return {
          TAG: /* Func */1,
          _0: (function (param) {
              return Curry._2(ab_c, param[0], param[1]);
            })
        };
}

function zip2(arrowA1b1, arrowA2b2) {
  return {
          TAG: /* Func */1,
          _0: (function (param) {
              return [
                      runF(arrowA1b1, param[0]),
                      runF(arrowA2b2, param[1])
                    ];
            })
        };
}

function zip3(arrowA1b1, arrowA2b2, arrowA3b3) {
  return {
          TAG: /* Func */1,
          _0: (function (param) {
              return [
                      runF(arrowA1b1, param[0]),
                      runF(arrowA2b2, param[1]),
                      runF(arrowA3b3, param[2])
                    ];
            })
        };
}

function zip4(arrowA1b1, arrowA2b2, arrowA3b3, arrowA4b4) {
  return {
          TAG: /* Func */1,
          _0: (function (param) {
              return [
                      runF(arrowA1b1, param[0]),
                      runF(arrowA2b2, param[1]),
                      runF(arrowA3b3, param[2]),
                      runF(arrowA4b4, param[3])
                    ];
            })
        };
}

function first(arrowAb) {
  return {
          TAG: /* Func */1,
          _0: (function (param) {
              return [
                      runF(arrowAb, param[0]),
                      param[1]
                    ];
            })
        };
}

function second(arrowAb) {
  return {
          TAG: /* Func */1,
          _0: (function (param) {
              return [
                      param[0],
                      runF(arrowAb, param[1])
                    ];
            })
        };
}

function left(arrowAb) {
  return {
          TAG: /* Func */1,
          _0: (function (eitherAc) {
              if (eitherAc.TAG) {
                return {
                        TAG: /* Right */1,
                        _0: eitherAc._0
                      };
              } else {
                return {
                        TAG: /* Left */0,
                        _0: runF(arrowAb, eitherAc._0)
                      };
              }
            })
        };
}

function right(arrowAb) {
  return {
          TAG: /* Func */1,
          _0: (function (eitherAc) {
              if (eitherAc.TAG) {
                return {
                        TAG: /* Right */1,
                        _0: runF(arrowAb, eitherAc._0)
                      };
              } else {
                return {
                        TAG: /* Left */0,
                        _0: eitherAc._0
                      };
              }
            })
        };
}

function okChannel(arrowAb) {
  return {
          TAG: /* Func */1,
          _0: (function (resultAc) {
              if (resultAc.TAG) {
                return {
                        TAG: /* Error */1,
                        _0: resultAc._0
                      };
              } else {
                return {
                        TAG: /* Ok */0,
                        _0: runF(arrowAb, resultAc._0)
                      };
              }
            })
        };
}

function errorChannel(arrowAb) {
  return {
          TAG: /* Func */1,
          _0: (function (resultAc) {
              if (resultAc.TAG) {
                return {
                        TAG: /* Error */1,
                        _0: runF(arrowAb, resultAc._0)
                      };
              } else {
                return {
                        TAG: /* Ok */0,
                        _0: resultAc._0
                      };
              }
            })
        };
}

function loop(arrowAc_bc, c) {
  return {
          TAG: /* Func */1,
          _0: (function (a) {
              return runF(arrowAc_bc, [
                            a,
                            c
                          ])[0];
            })
        };
}

function map(arrowAb, ab_cd) {
  var ab = function (param) {
    return runF(arrowAb, param);
  };
  var cd = Curry._1(ab_cd, ab);
  return {
          TAG: /* Func */1,
          _0: cd
        };
}

function apply(arrowAb_cd, arrowAb) {
  var ab = function (param) {
    return runF(arrowAb, param);
  };
  var cd = runF(arrowAb_cd, ab);
  return {
          TAG: /* Func */1,
          _0: cd
        };
}

function bind(arrowAb, ab_arrowCd) {
  return Curry._1(ab_arrowCd, (function (param) {
                return runF(arrowAb, param);
              }));
}

function lift(fToG, arrowF) {
  return {
          TAG: /* Func */1,
          _0: (function (arg) {
              return Curry._2(fToG, (function (param) {
                            return runF(arrowF, param);
                          }), arg);
            })
        };
}

function lift2(fToGToH, arrowF, arrowG) {
  return {
          TAG: /* Func */1,
          _0: (function (arg) {
              return Curry._3(fToGToH, (function (param) {
                            return runF(arrowF, param);
                          }), (function (param) {
                            return runF(arrowG, param);
                          }), arg);
            })
        };
}

var Infix = {
  $caret$great$great: pipeL,
  $great$great$caret: pipeR,
  $caret$less$less: composeL,
  $less$less$caret: composeR,
  $great$great$great: pipe,
  $less$less$less: compose,
  $less$$great: map,
  $less$star$great: apply,
  $great$great$eq: bind
};

var Impl = {
  arrow: arrow,
  pure: arrow,
  identity: identity,
  returnA: identity,
  runF: runF,
  pipeR: pipeR,
  pipeL: pipeL,
  composeR: composeR,
  composeL: composeL,
  pipe: pipe,
  compose: compose,
  split: split,
  unsplit: unsplit,
  zip2: zip2,
  zip3: zip3,
  zip4: zip4,
  first: first,
  second: second,
  left: left,
  right: right,
  okChannel: okChannel,
  errorChannel: errorChannel,
  loop: loop,
  join: runF,
  map: map,
  apply: apply,
  bind: bind,
  lift: lift,
  lift2: lift2,
  Infix: Infix
};

var pure = arrow;

var returnA = identity;

var join = runF;

exports.Impl = Impl;
exports.arrow = arrow;
exports.pure = pure;
exports.identity = identity;
exports.returnA = returnA;
exports.runF = runF;
exports.pipeR = pipeR;
exports.pipeL = pipeL;
exports.composeR = composeR;
exports.composeL = composeL;
exports.pipe = pipe;
exports.compose = compose;
exports.split = split;
exports.unsplit = unsplit;
exports.zip2 = zip2;
exports.zip3 = zip3;
exports.zip4 = zip4;
exports.first = first;
exports.second = second;
exports.left = left;
exports.right = right;
exports.okChannel = okChannel;
exports.errorChannel = errorChannel;
exports.loop = loop;
exports.join = join;
exports.map = map;
exports.apply = apply;
exports.bind = bind;
exports.lift = lift;
exports.lift2 = lift2;
exports.Infix = Infix;
/* No side effect */
