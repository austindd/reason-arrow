// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Arrow2 = require("./Arrow2.js");

function pure(a) {
  return Arrow2.pure(function (param) {
              return a;
            });
}

function map(mA, aToB) {
  return Curry._2(Arrow2.Impl.Infix.$great$great$caret, mA, aToB);
}

function bind(mA, aToMB) {
  var arrowAb = {
    TAG: /* Func */0,
    _0: (function (a) {
        return Arrow2.runF(Curry._1(aToMB, a), undefined);
      })
  };
  return {
          TAG: /* Pipe */1,
          _0: mA,
          _1: arrowAb
        };
}

function $$eval(__x) {
  return Arrow2.runF(__x, undefined);
}

var Lazy = {
  pure: pure,
  defer: Arrow2.pure,
  map: map,
  bind: bind,
  $$eval: $$eval
};

var lazyVal = Arrow2.pure(function (param) {
      return 0;
    });

for(var i = 1; i <= 1000000; ++i){
  if (i % 100000 === 0) {
    console.log(i);
  }
  lazyVal = bind(map(lazyVal, (function (n) {
              return n + 1 | 0;
            })), (function (n) {
          return Arrow2.pure(function (param) {
                      return n + 1 | 0;
                    });
        }));
}

var computation = lazyVal;

console.log(computation);

var result = Arrow2.runF(computation, undefined);

console.log(result);

exports.Lazy = Lazy;
exports.computation = computation;
exports.result = result;
/* lazyVal Not a pure module */
