// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");

var identity = {
  TAG: /* Func */0,
  _0: (function (prim) {
      return prim;
    })
};

function $$eval(__arrow, __arg) {
  var _acc = __arg;
  var _stack = identity;
  var _arrow = __arrow;
  while(true) {
    var arrow = _arrow;
    var stack = _stack;
    var acc = _acc;
    if (arrow.TAG) {
      _arrow = arrow._0;
      _stack = {
        TAG: /* Pipe */1,
        _0: arrow._1,
        _1: stack
      };
      continue ;
    }
    var result = Curry._1(arrow._0, acc);
    if (!stack.TAG) {
      return Curry._1(stack._0, result);
    }
    _arrow = stack._0;
    _stack = stack._1;
    _acc = result;
    continue ;
  };
}

function pure(f) {
  return {
          TAG: /* Func */0,
          _0: f
        };
}

function pipe(arrowF, arrowG) {
  return {
          TAG: /* Pipe */1,
          _0: arrowF,
          _1: arrowG
        };
}

function compose(arrowF, arrowG) {
  return {
          TAG: /* Pipe */1,
          _0: arrowG,
          _1: arrowF
        };
}

function map(arrowF, fToG) {
  var f = function (param) {
    return $$eval(arrowF, param);
  };
  var g = Curry._1(fToG, f);
  return {
          TAG: /* Func */0,
          _0: g
        };
}

function apply(arrowFF, arrowG) {
  var g = function (param) {
    return $$eval(arrowG, param);
  };
  return {
          TAG: /* Func */0,
          _0: $$eval(arrowFF, g)
        };
}

function bind(arrowF, fToArrowG) {
  var f = function (param) {
    return $$eval(arrowF, param);
  };
  var arrowG = Curry._1(fToArrowG, f);
  var g = function (param) {
    return $$eval(arrowG, param);
  };
  return {
          TAG: /* Func */0,
          _0: g
        };
}

var Impl = {
  identity: identity,
  pure: pure,
  pipe: pipe,
  compose: compose,
  $$eval: $$eval,
  map: map,
  apply: apply,
  bind: bind
};

exports.Impl = Impl;
exports.identity = identity;
exports.pure = pure;
exports.pipe = pipe;
exports.compose = compose;
exports.$$eval = $$eval;
exports.map = map;
exports.apply = apply;
exports.bind = bind;
/* No side effect */
