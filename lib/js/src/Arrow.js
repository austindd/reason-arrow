// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");

function arrow(f) {
  return {
          TAG: /* Func */0,
          _0: f
        };
}

var identity = {
  TAG: /* Func */0,
  _0: (function (prim) {
      return prim;
    })
};

function runF(__arrowAb, __a) {
  if (__arrowAb.TAG) {
    var _a = __a;
    var __arrAb = __arrowAb._0;
    var __arrBc = __arrowAb._1;
    while(true) {
      var _arrBc = __arrBc;
      var _arrAb = __arrAb;
      var a = _a;
      if (_arrAb.TAG) {
        var arrBc = _arrAb._1;
        var arrAb = _arrAb._0;
        if (arrAb.TAG) {
          var a_b = arrAb._0;
          if (a_b.TAG) {
            var a_b$1 = a_b._0;
            if (a_b$1.TAG) {
              __arrBc = {
                TAG: /* Pipe */1,
                _0: arrAb._1,
                _1: {
                  TAG: /* Pipe */1,
                  _0: arrBc,
                  _1: _arrBc
                }
              };
              __arrAb = a_b;
              continue ;
            }
            var b_c = a_b._1;
            var a_b$2 = a_b$1._0;
            if (b_c.TAG) {
              __arrBc = {
                TAG: /* Pipe */1,
                _0: arrAb._1,
                _1: {
                  TAG: /* Pipe */1,
                  _0: arrBc,
                  _1: _arrBc
                }
              };
              __arrAb = b_c;
              _a = Curry._1(a_b$2, a);
              continue ;
            }
            __arrBc = {
              TAG: /* Pipe */1,
              _0: arrBc,
              _1: _arrBc
            };
            __arrAb = arrAb._1;
            _a = Curry._1(b_c._0, Curry._1(a_b$2, a));
            continue ;
          }
          var b_c$1 = arrAb._1;
          var a_b$3 = a_b._0;
          if (b_c$1.TAG) {
            __arrBc = {
              TAG: /* Pipe */1,
              _0: arrBc,
              _1: _arrBc
            };
            __arrAb = b_c$1;
            _a = Curry._1(a_b$3, a);
            continue ;
          }
          __arrAb = arrBc;
          _a = Curry._1(b_c$1._0, Curry._1(a_b$3, a));
          continue ;
        }
        __arrAb = arrBc;
        _a = Curry._1(arrAb._0, a);
        continue ;
      }
      var a_b$4 = _arrAb._0;
      if (!_arrBc.TAG) {
        return Curry._1(_arrBc._0, Curry._1(a_b$4, a));
      }
      var arrCd = _arrBc._1;
      var arrBc$1 = _arrBc._0;
      if (arrBc$1.TAG) {
        var b_c$2 = arrBc$1._0;
        if (b_c$2.TAG) {
          __arrBc = {
            TAG: /* Pipe */1,
            _0: arrBc$1._1,
            _1: arrCd
          };
          __arrAb = b_c$2;
          _a = Curry._1(a_b$4, a);
          continue ;
        }
        __arrBc = arrCd;
        __arrAb = arrBc$1._1;
        _a = Curry._1(b_c$2._0, Curry._1(a_b$4, a));
        continue ;
      }
      var b_c$3 = arrBc$1._0;
      if (!arrCd.TAG) {
        return Curry._1(arrCd._0, Curry._1(b_c$3, Curry._1(a_b$4, a)));
      }
      __arrBc = arrCd._1;
      __arrAb = arrCd._0;
      _a = Curry._1(b_c$3, Curry._1(a_b$4, a));
      continue ;
    };
  } else {
    return Curry._1(__arrowAb._0, __a);
  }
}

function pipeR(arrowAb, bc) {
  return {
          TAG: /* Pipe */1,
          _0: arrowAb,
          _1: {
            TAG: /* Func */0,
            _0: bc
          }
        };
}

function pipeL(ab, arrowBc) {
  return {
          TAG: /* Pipe */1,
          _0: {
            TAG: /* Func */0,
            _0: ab
          },
          _1: arrowBc
        };
}

function composeR(arrowBc, ab) {
  return {
          TAG: /* Pipe */1,
          _0: {
            TAG: /* Func */0,
            _0: ab
          },
          _1: arrowBc
        };
}

function composeL(bc, arrowAb) {
  return {
          TAG: /* Pipe */1,
          _0: arrowAb,
          _1: {
            TAG: /* Func */0,
            _0: bc
          }
        };
}

function pipe(arrowAb, arrowBc) {
  return {
          TAG: /* Pipe */1,
          _0: arrowAb,
          _1: arrowBc
        };
}

function compose(arrowBc, arrowAb) {
  return {
          TAG: /* Pipe */1,
          _0: arrowAb,
          _1: arrowBc
        };
}

var split = {
  TAG: /* Func */0,
  _0: (function (a) {
      return [
              a,
              a
            ];
    })
};

function unsplit(ab_c) {
  return {
          TAG: /* Func */0,
          _0: (function (param) {
              return Curry._2(ab_c, param[0], param[1]);
            })
        };
}

function zip2(arrowA1b1, arrowA2b2) {
  return {
          TAG: /* Func */0,
          _0: (function (param) {
              return [
                      runF(arrowA1b1, param[0]),
                      runF(arrowA2b2, param[1])
                    ];
            })
        };
}

function zip3(arrowA1b1, arrowA2b2, arrowA3b3) {
  return {
          TAG: /* Func */0,
          _0: (function (param) {
              return [
                      runF(arrowA1b1, param[0]),
                      runF(arrowA2b2, param[1]),
                      runF(arrowA3b3, param[2])
                    ];
            })
        };
}

function zip4(arrowA1b1, arrowA2b2, arrowA3b3, arrowA4b4) {
  return {
          TAG: /* Func */0,
          _0: (function (param) {
              return [
                      runF(arrowA1b1, param[0]),
                      runF(arrowA2b2, param[1]),
                      runF(arrowA3b3, param[2]),
                      runF(arrowA4b4, param[3])
                    ];
            })
        };
}

function first(arrowAb) {
  return {
          TAG: /* Func */0,
          _0: (function (param) {
              return [
                      runF(arrowAb, param[0]),
                      param[1]
                    ];
            })
        };
}

function second(arrowAb) {
  return {
          TAG: /* Func */0,
          _0: (function (param) {
              return [
                      param[0],
                      runF(arrowAb, param[1])
                    ];
            })
        };
}

function left(arrowAb) {
  return {
          TAG: /* Func */0,
          _0: (function (eitherAc) {
              if (eitherAc.TAG) {
                return {
                        TAG: /* Right */1,
                        _0: eitherAc._0
                      };
              } else {
                return {
                        TAG: /* Left */0,
                        _0: runF(arrowAb, eitherAc._0)
                      };
              }
            })
        };
}

function right(arrowAb) {
  return {
          TAG: /* Func */0,
          _0: (function (eitherAc) {
              if (eitherAc.TAG) {
                return {
                        TAG: /* Right */1,
                        _0: runF(arrowAb, eitherAc._0)
                      };
              } else {
                return {
                        TAG: /* Left */0,
                        _0: eitherAc._0
                      };
              }
            })
        };
}

function okChannel(arrowAb) {
  return {
          TAG: /* Func */0,
          _0: (function (resultAc) {
              if (resultAc.TAG) {
                return {
                        TAG: /* Error */1,
                        _0: resultAc._0
                      };
              } else {
                return {
                        TAG: /* Ok */0,
                        _0: runF(arrowAb, resultAc._0)
                      };
              }
            })
        };
}

function errorChannel(arrowAb) {
  return {
          TAG: /* Func */0,
          _0: (function (resultAc) {
              if (resultAc.TAG) {
                return {
                        TAG: /* Error */1,
                        _0: runF(arrowAb, resultAc._0)
                      };
              } else {
                return {
                        TAG: /* Ok */0,
                        _0: resultAc._0
                      };
              }
            })
        };
}

function loop(arrowAc_bc, c) {
  return {
          TAG: /* Func */0,
          _0: (function (a) {
              return runF(arrowAc_bc, [
                            a,
                            c
                          ])[0];
            })
        };
}

function dimap(arrowAb, ca, bd) {
  return {
          TAG: /* Pipe */1,
          _0: {
            TAG: /* Func */0,
            _0: ca
          },
          _1: {
            TAG: /* Pipe */1,
            _0: arrowAb,
            _1: {
              TAG: /* Func */0,
              _0: bd
            }
          }
        };
}

function map(arrowAb, ab_cd) {
  var ab = function (param) {
    return runF(arrowAb, param);
  };
  var cd = Curry._1(ab_cd, ab);
  return {
          TAG: /* Func */0,
          _0: cd
        };
}

function apply(arrowAb_cd, arrowAb) {
  var ab = function (param) {
    return runF(arrowAb, param);
  };
  var cd = runF(arrowAb_cd, ab);
  return {
          TAG: /* Func */0,
          _0: cd
        };
}

function bind(arrowAb, ab_arrowCd) {
  return Curry._1(ab_arrowCd, (function (param) {
                return runF(arrowAb, param);
              }));
}

function lift(fToG, arrowF) {
  return {
          TAG: /* Func */0,
          _0: (function (arg) {
              return Curry._2(fToG, (function (param) {
                            return runF(arrowF, param);
                          }), arg);
            })
        };
}

function lift2(fToGToH, arrowF, arrowG) {
  return {
          TAG: /* Func */0,
          _0: (function (arg) {
              return Curry._3(fToGToH, (function (param) {
                            return runF(arrowF, param);
                          }), (function (param) {
                            return runF(arrowG, param);
                          }), arg);
            })
        };
}

var Infix = {
  $caret$great$great: pipeL,
  $great$great$caret: pipeR,
  $caret$less$less: composeL,
  $less$less$caret: composeR,
  $great$great$great: pipe,
  $less$less$less: compose,
  $less$$great: map,
  $less$star$great: apply,
  $great$great$eq: bind
};

var Impl = {
  arrow: arrow,
  pure: arrow,
  identity: identity,
  returnA: identity,
  runF: runF,
  pipeR: pipeR,
  pipeL: pipeL,
  composeR: composeR,
  composeL: composeL,
  pipe: pipe,
  compose: compose,
  split: split,
  unsplit: unsplit,
  zip2: zip2,
  zip3: zip3,
  zip4: zip4,
  first: first,
  second: second,
  left: left,
  right: right,
  okChannel: okChannel,
  errorChannel: errorChannel,
  loop: loop,
  join: runF,
  dimap: dimap,
  map: map,
  apply: apply,
  bind: bind,
  lift: lift,
  lift2: lift2,
  Infix: Infix
};

var pure = arrow;

var returnA = identity;

var join = runF;

exports.Impl = Impl;
exports.arrow = arrow;
exports.pure = pure;
exports.identity = identity;
exports.returnA = returnA;
exports.runF = runF;
exports.pipeR = pipeR;
exports.pipeL = pipeL;
exports.composeR = composeR;
exports.composeL = composeL;
exports.pipe = pipe;
exports.compose = compose;
exports.split = split;
exports.unsplit = unsplit;
exports.zip2 = zip2;
exports.zip3 = zip3;
exports.zip4 = zip4;
exports.first = first;
exports.second = second;
exports.left = left;
exports.right = right;
exports.okChannel = okChannel;
exports.errorChannel = errorChannel;
exports.loop = loop;
exports.join = join;
exports.dimap = dimap;
exports.map = map;
exports.apply = apply;
exports.bind = bind;
exports.lift = lift;
exports.lift2 = lift2;
exports.Infix = Infix;
/* No side effect */
