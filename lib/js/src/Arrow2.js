// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");

var identity = {
  TAG: /* Func */0,
  _0: (function (prim) {
      return prim;
    })
};

function runF(__arrow, __arg) {
  var _acc = __arg;
  var _stack = identity;
  var _arrow = __arrow;
  while(true) {
    var arrow = _arrow;
    var stack = _stack;
    var acc = _acc;
    if (arrow.TAG) {
      _arrow = arrow._0;
      _stack = {
        TAG: /* Pipe */1,
        _0: arrow._1,
        _1: stack
      };
      continue ;
    }
    var result = Curry._1(arrow._0, acc);
    if (!stack.TAG) {
      return Curry._1(stack._0, result);
    }
    _arrow = stack._0;
    _stack = stack._1;
    _acc = result;
    continue ;
  };
}

function pipeR(arrow_ab, bc) {
  return {
          TAG: /* Pipe */1,
          _0: arrow_ab,
          _1: {
            TAG: /* Func */0,
            _0: bc
          }
        };
}

function pipeL(ab, arrow_bc) {
  return {
          TAG: /* Pipe */1,
          _0: {
            TAG: /* Func */0,
            _0: ab
          },
          _1: arrow_bc
        };
}

function composeR(arrow_bc, ab) {
  return {
          TAG: /* Pipe */1,
          _0: {
            TAG: /* Func */0,
            _0: ab
          },
          _1: arrow_bc
        };
}

function composeL(bc, arrow_ab) {
  return {
          TAG: /* Pipe */1,
          _0: arrow_ab,
          _1: {
            TAG: /* Func */0,
            _0: bc
          }
        };
}

function pipe(arrow_ab, arrow_bc) {
  return {
          TAG: /* Pipe */1,
          _0: arrow_ab,
          _1: arrow_bc
        };
}

function compose(arrow_bc, arrow_ab) {
  return {
          TAG: /* Pipe */1,
          _0: arrow_ab,
          _1: arrow_bc
        };
}

function first(arrow_ab) {
  return {
          TAG: /* Func */0,
          _0: (function (param) {
              return [
                      runF(arrow_ab, param[0]),
                      param[1]
                    ];
            })
        };
}

function second(arrow_ab) {
  return {
          TAG: /* Func */0,
          _0: (function (param) {
              return [
                      param[0],
                      runF(arrow_ab, param[1])
                    ];
            })
        };
}

var split = {
  TAG: /* Func */0,
  _0: (function (x) {
      return [
              x,
              x
            ];
    })
};

function unsplit(ab_c) {
  return {
          TAG: /* Func */0,
          _0: (function (param) {
              return Curry._2(ab_c, param[0], param[1]);
            })
        };
}

function left(arrowAb) {
  return {
          TAG: /* Func */0,
          _0: (function (eitherAc) {
              if (eitherAc.TAG) {
                return {
                        TAG: /* Right */1,
                        _0: eitherAc._0
                      };
              } else {
                return {
                        TAG: /* Left */0,
                        _0: runF(arrowAb, eitherAc._0)
                      };
              }
            })
        };
}

function right(arrowAb) {
  return {
          TAG: /* Func */0,
          _0: (function (eitherAc) {
              if (eitherAc.TAG) {
                return {
                        TAG: /* Right */1,
                        _0: runF(arrowAb, eitherAc._0)
                      };
              } else {
                return {
                        TAG: /* Left */0,
                        _0: eitherAc._0
                      };
              }
            })
        };
}

function okChannel(arrowAb) {
  return {
          TAG: /* Func */0,
          _0: (function (resultAc) {
              if (resultAc.TAG) {
                return {
                        TAG: /* Error */1,
                        _0: resultAc._0
                      };
              } else {
                return {
                        TAG: /* Ok */0,
                        _0: runF(arrowAb, resultAc._0)
                      };
              }
            })
        };
}

function errorChannel(arrowAb) {
  return {
          TAG: /* Func */0,
          _0: (function (resultAc) {
              if (resultAc.TAG) {
                return {
                        TAG: /* Error */1,
                        _0: runF(arrowAb, resultAc._0)
                      };
              } else {
                return {
                        TAG: /* Ok */0,
                        _0: resultAc._0
                      };
              }
            })
        };
}

function zip(arrowAb, arrowCd) {
  var f = function (param) {
    return [
            runF(arrowAb, param[0]),
            runF(arrowCd, param[1])
          ];
  };
  return {
          TAG: /* Func */0,
          _0: f
        };
}

function loop(arrow_ac_bc, c) {
  return {
          TAG: /* Func */0,
          _0: (function (a) {
              return runF(arrow_ac_bc, [
                            a,
                            c
                          ])[0];
            })
        };
}

function pure(f) {
  return {
          TAG: /* Func */0,
          _0: f
        };
}

function map(arrow_ab, ab_cd) {
  var ab = function (param) {
    return runF(arrow_ab, param);
  };
  var cd = Curry._1(ab_cd, ab);
  return {
          TAG: /* Func */0,
          _0: cd
        };
}

function apply(arrow_ab_cd, arrow_ab) {
  var ab = function (param) {
    return runF(arrow_ab, param);
  };
  var cd = runF(arrow_ab_cd, ab);
  return {
          TAG: /* Func */0,
          _0: cd
        };
}

function bind(arrowAb, ab_arrowCd) {
  return Curry._1(ab_arrowCd, (function (param) {
                return runF(arrowAb, param);
              }));
}

function lift(fToG, arrowF) {
  return {
          TAG: /* Func */0,
          _0: (function (arg) {
              return Curry._2(fToG, (function (param) {
                            return runF(arrowF, param);
                          }), arg);
            })
        };
}

function lift2(fToGToH, arrowF, arrowG) {
  return {
          TAG: /* Func */0,
          _0: (function (arg) {
              return Curry._3(fToGToH, (function (param) {
                            return runF(arrowF, param);
                          }), (function (param) {
                            return runF(arrowG, param);
                          }), arg);
            })
        };
}

var Infix = {
  $caret$great$great: pipeL,
  $great$great$caret: pipeR,
  $caret$less$less: composeL,
  $less$less$caret: composeR,
  $great$great$great: pipe,
  $less$less$less: compose,
  $less$$great: map,
  $less$star$great: apply,
  $great$great$eq: bind
};

var Impl = {
  identity: identity,
  returnA: identity,
  runF: runF,
  pipeR: pipeR,
  pipeL: pipeL,
  composeR: composeR,
  composeL: composeL,
  pipe: pipe,
  compose: compose,
  concat: pipe,
  first: first,
  second: second,
  split: split,
  unsplit: unsplit,
  left: left,
  right: right,
  okChannel: okChannel,
  errorChannel: errorChannel,
  zip: zip,
  loop: loop,
  pure: pure,
  arrow: pure,
  join: runF,
  map: map,
  apply: apply,
  bind: bind,
  lift: lift,
  lift2: lift2,
  Infix: Infix
};

var returnA = identity;

var concat = pipe;

var arrow = pure;

var join = runF;

exports.Impl = Impl;
exports.identity = identity;
exports.returnA = returnA;
exports.runF = runF;
exports.pipeR = pipeR;
exports.pipeL = pipeL;
exports.composeR = composeR;
exports.composeL = composeL;
exports.pipe = pipe;
exports.compose = compose;
exports.concat = concat;
exports.first = first;
exports.second = second;
exports.split = split;
exports.unsplit = unsplit;
exports.left = left;
exports.right = right;
exports.okChannel = okChannel;
exports.errorChannel = errorChannel;
exports.zip = zip;
exports.loop = loop;
exports.pure = pure;
exports.arrow = arrow;
exports.join = join;
exports.map = map;
exports.apply = apply;
exports.bind = bind;
exports.lift = lift;
exports.lift2 = lift2;
exports.Infix = Infix;
/* No side effect */
